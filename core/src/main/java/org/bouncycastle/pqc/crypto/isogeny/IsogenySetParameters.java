package org.bouncycastle.pqc.crypto.isogeny;

import java.math.BigInteger;

/**
 * Precomputed domain parameters for the isogeny-based key
 * agreement from D. Jao and L. De Feo, Towards quantum-resistant 
 * cryptosystems from supersingular elliptic curve isogenies, 
 * PQCrypto 2011.
 */
public class IsogenySetParameters {

	// The classical security of the isogeny-based key agreement is
	// 1/4 of the bit size of the prime and the quantum security is
	// 1/6 of the bit size.
	//
	// The primes below (or more specifically the values for eA, eB 
	// and f) are taken from parameter sets for lA=2 and lB=3 listed in 
	// Luca De Feo's code (https://github.com/defeo/ss-isogeny-software/).
	//
	// The initial supersingular curve over GF(p^2) in each case is
	// chosen to be y^2 = x^3 + x and the bases for the torsion subgroups
	// E0[2^lA] and E0[3^lB] were randomly generated using De Feo's
	// Sage code. Similarly, the optimal strategies for computing the
	// 2^lA- and 3^lB-isogenies were found using De Feo's Python script.

		
	public IsogenySetParameters()
	{	
		// Nothing to do
	}


	public static IsogenyDomainParameters getParameters(int strength)
	{
		//  Set the prime p = 2^eA*2^eB*f - 1
		
		int eA, eB, f;
		
		if(strength <= 10)
		{
			eA = 22;  // Alice's exponent
			eB = 15;  // Bob's exponent
			f  = 1;   // Cofactor			
		}
		else if (strength <= 64)
		{
			eA = 130;  // Alice's exponent
			eB = 81;   // Bob's exponent
			f  = 22;   // Cofactor	
		}
		else if (strength <= 128)
		{
			eA = 258;  // Alice's exponent
			eB = 161;  // Bob's exponent
			f  = 186;  // Cofactor	
		}
		else if (strength <= 192)
		{
			eA = 386;  // Alice's exponent
			eB = 242;  // Bob's exponent
			f  = 2;    // Cofactor	
		}
		else if (strength <= 256)
		{
			eA = 514;  // Alice's exponent
			eB = 323;  // Bob's exponent
			f  = 353;  // Cofactor	
		}
	
		else
			throw new RuntimeException("Strength "+strength+" not implemented");

		BigInteger p = (BigInteger.valueOf(2).pow(eA)).
				multiply(BigInteger.valueOf(3).pow(eB)).
				multiply(BigInteger.valueOf(f)).
				subtract(BigInteger.ONE);



		// For simplicity we will use the supersingular curve 
		// over GF(p^2)
		//
		//    E0: y^2 = x^3 + x.

		Fp2Field.init(p);
		Fp2Curve E0 = new Fp2Curve(Fp2Field.ZERO, Fp2Field.ONE);



		// Optimal strategies for computing the isogenies.

		int[] StrategyA, StrategyB;
		
		if(strength <= 10)
		{
			// Alice's strategy
			int[] sA = {0,0,1,2,2,3,3,4,5,5,5,6,7,8,8,8,8,9,11,11,12};
			StrategyA = new int[sA.length];
			for(int i=0; i<sA.length; i++) 
				StrategyA[i] = sA[i];

			// Bob's strategy
			int[] sB = {0,0,1,2,2,3,3,4,5,5,5,6,7,8,8,8 }; 
			StrategyB = new int[sB.length];
			for(int i=0; i<sB.length; i++) 
				StrategyB[i] = sB[i];
		}
		else if (strength <= 64)
		{
			// Alice's strategy
			int sA[] = {0,0,1,2,2,3,3,4,5,5,5,6,7,8,8,8,8,9,10,11,12,13,13,13,13,13,13,14,15,16,17,18,19,20,21,21,21,21,21,21,21,21,21,22,23,24,25,26,27,28,29,30,31,32,33,34,34,34,34,34,34,34,34,34,34,34,34,34,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73};
			StrategyA = new int[sA.length];
			for(int i=0; i<sA.length; i++) 
				StrategyA[i] = sA[i];

			// Bob's strategy
			int sB[] = {0,0,1,2,2,3,3,4,5,5,5,6,7,8,8,8,8,9,10,11,12,13,13,13,13,13,13,14,15,16,17,18,19,20,21,21,21,21,21,21,21,21,21,22,23,24,25,26,27,28,29,30,31,32,33,34,34,34,34,34,34,34,34,34,34,34,34,34,34,35,36,37,38,39,40,41,42,43,44,45,46,47};
			StrategyB = new int[sB.length];
			for(int i=0; i<sB.length; i++) 
				StrategyB[i] = sB[i];		
		}
		else if (strength <= 128)
		{
			// Alice's strategy
			int sA[]={0,0,1,2,2,3,3,4,5,5,5,6,7,8,8,8,8,9,10,11,12,13,13,13,13,13,13,14,15,16,17,18,19,20,21,21,21,21,21,21,21,21,21,22,23,24,25,26,27,28,29,30,31,32,33,34,34,34,34,34,34,34,34,34,34,34,34,34,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144};
			StrategyA = new int[sA.length];
			for(int i=0; i<sA.length; i++) 
				StrategyA[i]=sA[i];

			// Bob's strategy
			int sB[]={0,0,1,2,2,3,3,4,5,5,5,6,7,8,8,8,8,9,10,11,12,13,13,13,13,13,13,14,15,16,17,18,19,20,21,21,21,21,21,21,21,21,21,22,23,24,25,26,27,28,29,30,31,32,33,34,34,34,34,34,34,34,34,34,34,34,34,34,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89};
			StrategyB = new int[sB.length];
			for(int i=0; i<sB.length; i++) 
				StrategyB[i]=sB[i];		
		}
		else if (strength <= 192)
		{
			// Alice's strategy		
			int sA[] = {0,0,1,2,2,3,3,4,5,5,5,6,7,8,8,8,8,9,10,11,12,13,13,13,13,13,13,14,15,16,17,18,19,20,21,21,21,21,21,21,21,21,21,22,23,24,25,26,27,28,29,30,31,32,33,34,34,34,34,34,34,34,34,34,34,34,34,34,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,233,233,233,233,233,233,233};
			StrategyA = new int[sA.length];
			for(int i=0; i<sA.length; i++) 
				StrategyA[i]=sA[i];			

			// Bob's strategy
			int sB[] = {0,0,1,2,2,3,3,4,5,5,5,6,7,8,8,8,8,9,10,11,12,13,13,13,13,13,13,14,15,16,17,18,19,20,21,21,21,21,21,21,21,21,21,22,23,24,25,26,27,28,29,30,31,32,33,34,34,34,34,34,34,34,34,34,34,34,34,34,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,144,144,144,144,144,144,144,144,144};
			StrategyB = new int[sB.length];
			for(int i=0; i<sB.length; i++) 
				StrategyB[i]=sB[i];			
		}
		else if (strength <= 256)
		{
			// Alice's strategy
			int sA[]={0,0,1,2,2,3,3,4,5,5,5,6,7,8,8,8,8,9,10,11,12,13,13,13,13,13,13,14,15,16,17,18,19,20,21,21,21,21,21,21,21,21,21,22,23,24,25,26,27,28,29,30,31,32,33,34,34,34,34,34,34,34,34,34,34,34,34,34,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279};
			StrategyA = new int[sA.length];
			for(int i=0; i<sA.length; i++) 
				StrategyA[i]=sA[i];

			// Bob's strategy
			int sB[]={0,0,1,2,2,3,3,4,5,5,5,6,7,8,8,8,8,9,10,11,12,13,13,13,13,13,13,14,15,16,17,18,19,20,21,21,21,21,21,21,21,21,21,22,23,24,25,26,27,28,29,30,31,32,33,34,34,34,34,34,34,34,34,34,34,34,34,34,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179};
			StrategyB = new int[sB.length];
			for(int i=0; i<sB.length; i++) 
				StrategyB[i]=sB[i];	
		}

		else
			throw new RuntimeException("Strength "+strength+" not implemented");


		// Bases for the 2^eA- and 3^eB-torsion subgroups

		BigInteger PAx_re,PAx_im,PAy_re,PAy_im;
		BigInteger QAx_re,QAx_im,QAy_re,QAy_im;
		BigInteger PBx_re,PBx_im,PBy_re,PBy_im;
		BigInteger QBx_re,QBx_im,QBy_re,QBy_im;
		
		if (strength <= 10)
		{
			// Alice's first basis point
			PAx_re = new BigInteger("31612513142002");
			PAx_im = new BigInteger("35933776374688");
			PAy_re = new BigInteger("19246407781407");
			PAy_im = new BigInteger("49074146622181");

			// Alice's second basis point
			QAx_re = new BigInteger("48009746044732");
			QAx_im = new BigInteger("4876092162382");
			QAy_re = new BigInteger("26169020297700");
			QAy_im = new BigInteger("56689060188274");

			// Bob's first basis point
			PBx_re = new BigInteger("16795381774846");
			PBx_im = new BigInteger("33180004795105");
			PBy_re = new BigInteger("19434723997089");
			PBy_im = new BigInteger("33443291101753");

			// Bob's second basis point
			QBx_re = new BigInteger("5304855958389");
			QBx_im = new BigInteger("57670207364709");
			QBy_re = new BigInteger("11271641788085");
			QBy_im = new BigInteger("10254065864740");
		}
		else if (strength <= 64)
		{
			// Alice's first basis point
			PAx_re = new BigInteger("103068082738071747563020073598504689562384258248"
					+ "87542467737509394789519374110362");
			PAx_im = new BigInteger("042019003796661991554249324199124707366150198073"
					+ "64855716520152879037067402141476");
			PAy_re = new BigInteger("039455317289831425626158658326524494479578631625"
					+ "22465941590142300653108001721463");
			PAy_im = new BigInteger("047724452456741315491673761335867389176058104156"
					+ "45534323565968467049424927987762");

			// Alice's second basis point
			QAx_re = new BigInteger("854922888337050714140825587050548665182974982631"
					+ "0148307353621159704061816440526");
			QAx_im = new BigInteger("475138279277504438046323382544398435864815954956"
					+ "8272939186307411741110185832882");
			QAy_re = new BigInteger("478169539896567222952003737770892368608210400215"
					+ "1438968062678356846122852618048");
			QAy_im = new BigInteger("769118162711058522664371967848479441053034724562"
					+ "2137147134194690245593785169895");

			// Bob's first basis point
			PBx_re = new BigInteger("061548589991307568393587699810998308871613438775"
					+ "92119256997497296210531070144644");
			PBx_im = new BigInteger("011628646238540553662309257569416337446463172911"
					+ "07136704194180597188539992592875");
			PBy_re = new BigInteger("057109699370401311416886043313853986856256910118"
					+ "76461182876493397926897153268724");
			PBy_im = new BigInteger("031445869509512790210694742850079830999037647928"
					+ "19909460622476335521013414927322");

			// Bob's second basis point
			QBx_re = new BigInteger("131927006914098200087173471465940539159294356957"
					+ "31492670012631986036267774622276");
			QBx_im = new BigInteger("100353659375729254951293092389000075172148090965"
					+ "52886072968015513086409337226453");
			QBy_re = new BigInteger("046911706626903057924125469075963440475965594782"
					+ "29373236065670290188657164973311");
			QBy_im = new BigInteger("087806907176458926001942785784198588977765086891"
					+ "88863741560753086518187105876058");
		}
		else if (strength <= 128)
		{
			// Alice's first basis point
			PAx_re = new BigInteger("156205913539598992135417899207781176477734933229"
					+ "96058585432883656241371125087324586942747109687117768880047576"
					+ "54044229019853508621906839223496766857060418720");
			PAx_im = new BigInteger("206150684136306795140702789721035166882771227006"
					+ "25351256113658401384448140596244044955928661693599162875191633"
					+ "85660827800914250685377921327460950138908105219");
			PAy_re = new BigInteger("431129938770996060803731819962837742188605072095"
					+ "15885241321138008675452093658340472231813727738321757543780352"
					+ "82425600066274492010503507273295719257300744504");
			PAy_im = new BigInteger("260964333356004846206158719309356253943682212493"
					+ "91667795428695185552513236236028719170791670582612277249091394"
					+ "40610791759932925292920314482459681724311092833");

			// Alice's second basis point
			QAx_re = new BigInteger("053991812462998332354726154437834886839565069295"
					+ "56935169877290965163182016704597476352872387891558406804257648"
					+ "78289787052781382709955108558867691821088982060");
			QAx_im = new BigInteger("426150268170134534691044159035577101696760229303"
					+ "29342980016692239647049587040694751663999888505969159072537177"
					+ "26120510367165845805268938674909821949138199237");
			QAy_re = new BigInteger("047253752820329895755713428222750484678682752607"
					+ "20932128804540955291866224299347879821573370922963676022893540"
					+ "24391224510522597850816478404372164931567368921");
			QAy_im = new BigInteger("107871485879070846571543527829975895558380576781"
					+ "48042321189383090447817081029610983209158661979934224380231972"
					+ "85679684993101122751693930989972983455334572073");

			// Bob's first basis point
			PBx_re = new BigInteger("169071352121171351113784029752656975280074662412"
					+ "81981827608235389668178007950601549039830327871723621503258319"
					+ "41571306243386817104955015199170245316272749773");
			PBx_im = new BigInteger("357862299620932024543712448118635095815619288218"
					+ "83560986208374553317426349979030792141305227694396542986077758"
					+ "61335476582246408050895888040659133053002987837");
			PBy_re = new BigInteger("993163754218624377302409937527048273703347310512"
					+ "45511668376422115966821084506159795107362339672838987006130482"
					+ "0067850315108110271429234937976990832822362272");
			PBy_im = new BigInteger("549003279118846617284069222226496238226623483777"
					+ "52680606335242252342186471111846691116665370103476895617864220"
					+ "13684702784113817701435270609078486229704055170");

			// Bob's second basis point
			QBx_re = new BigInteger("554039928557561012203986699168801801155240594637"
					+ "95014381218663221140831550997843547183444907736281621179287258"
					+ "20553900362858741723198602602804220370127694740");
			QBx_im = new BigInteger("442502336688420570762170145879381249781680449699"
					+ "72023035409789298013353434195119159585762753588009171257385427"
					+ "24721243003148927791968989198429787438554142961");
			QBy_re = new BigInteger("285840640886020425928647901086725120692363907525"
					+ "13978353157257364886138683561828113397140050454904135899248010"
					+ "01815049743259810974912135886811837203899223776");
			QBy_im = new BigInteger("301664388058152377691131210023913438694847855473"
					+ "09142396482665934297123987083700449673601642897608045448034142"
					+ "09111340225105643817581696477643702653404025177");
		}
		else if (strength <= 192)
		{
			// Alice's first basis point
			PAx_re = new BigInteger("770207570519424194832387123510967381246635784142"
					+ "68000970341175652116851454112622314784556869023933711569910360"
					+ "03709341857128773217145011043802275528449854312341009818723072"
					+ "304238139321718104451178852657679160205190593712935500455858");
			PAx_im = new BigInteger("633950754599731476359395195256625017864114355062"
					+ "02497322415438074541334119801985657210329089071488248347325806"
					+ "51208996674279248550707328514945352206606979662126769346886306"
					+ "264209437462336418862852684643332673654633425781264370707343");
			PAy_re = new BigInteger("264394915450763252643678373744976131498858006322"
					+ "19845240259001642700963430710244326132268344556281382134464278"
					+ "75279963147313607558864548944402361681533141564997049229508760"
					+ "760672360804852447625658670405989449502796180024153749577639");
			PAy_im = new BigInteger("174441519101744911809177856366969359598001601583"
					+ "03102756126493349052083667511291084863987951922316327292684589"
					+ "17853091744037281855358932305193913390334918104101416554929511"
					+ "252865070623211050737004958256145871381562452913374050662622");

			// Alice's second basis point
			QAx_re = new BigInteger("195889765331317014462782401243827476238362884627"
					+ "31685557182299022663520232945262643539187214540683200626618019"
					+ "82967176089663718717649078313000439038774968784998961841880208"
					+ "693076588419082073256019475574135259029943474824602831020535");
			QAx_im = new BigInteger("454332681974729353135151158309459806983091623755"
					+ "64136305045941089391499300144476364090610175366706005844251656"
					+ "26161226343151145007395459768106985351217288331061594125420961"
					+ "358358280388528557403292582501693454407478910343453109433810");
			QAy_re = new BigInteger("130586053262897393395070715058464730265561006427"
					+ "61573142979548570212133134590419277893233868986562999073799311"
					+ "42359777025113269728288124438117455788556488529478532442090951"
					+ "745257126932706842649794222735652903467642469429219062136876");
			QAy_im = new BigInteger("813846750473605235265869062548153495613125616720"
					+ "24084092299400334641909032268724618499023418983984664366481865"
					+ "51389470607048848341438819382112308031477371468515367524593102"
					+ "906979087771560411443394114245166895243916058908120626891189");

			// Bob's first basis point
			PBx_re = new BigInteger("164564797750400580637500537873821616003532298904"
					+ "70900125658170001555859134846458186473973481659078786487659789"
					+ "53694361761395987897317341703796813896920975012461766834548996"
					+ "079188213596453686409117534740775124871989998077339101473691");
			PBx_im = new BigInteger("179187770770323211093170833560987193526994542946"
					+ "67650278682778663462772753788534017366855819258775859317869894"
					+ "65480231882908491177641712653441845917069633487019317649944756"
					+ "364877611329890745821869219012598755595161990062485019035682");
			PBy_re = new BigInteger("506639939039969684786321066310871979280029120097"
					+ "69897631027234013687858864258306841726686341208310156527873249"
					+ "32063296544303200708220009454035580337443350022597893688466512"
					+ "174380307886739938928109180722842256002663725624027847705080");
			PBy_im = new BigInteger("518755472516837209166246255353889575861206540152"
					+ "06641589869919963127192761853313789662996017535768642149184902"
					+ "26722806490959229481298009904185550632099619018787388675245841"
					+ "735830508411859383909196081116947215975091782586626606220608");

			// Bob's second basis point
			QBx_re = new BigInteger("521725567495150575728657727741919224033149880847"
					+ "66901085062259939036829762218600662342686303973532426787471083"
					+ "89149156793314296326338984926649663344090898755229913439524138"
					+ "793151244374342382543330599397039747915281052231328688335390");
			QBx_im = new BigInteger("890416531504163269778380366178702647658237362276"
					+ "18674848499381318511826171987580075938013830593060260492745381"
					+ "76653121483848951489698290572129198422020578570897258981768532"
					+ "092633588547945700644529433100484564379031399378727007901127");
			QBy_re = new BigInteger("591946427581895617767416798724217776385798937290"
					+ "19904486356829827686443603855133203189545117450758391847027530"
					+ "27752429774404973628192985994520306277998472262624766349446033"
					+ "436183343856083584168822491938978547594103946335879957099178");
			QBy_im = new BigInteger("054010751080886921433840913340840208851128959324"
					+ "63983982321731535813558940651753997615908168710716706907340265"
					+ "36418649514605824151161756240427375516347002727313116462092123"
					+ "418706429509655051559988712830372439350982569589996815503812");
		}
		else if (strength <= 256)
		{
			// Alice's first basis point
			PAx_re = new BigInteger("160787674780389310077848477154093260239334845415"
					+ "68972456004206860672596013065670920356198740815374802122552498"
					+ "66560266288029038807599166784213575068545284958418462760448235"
					+ "67159528514400373736667056978307958334540462318640814559607175"
					+ "34760261051146772136107790571444229505771995160985806131663108"
					+ "5098471916352523");
			PAx_im = new BigInteger("000637731710139258721782196756616594269037558055"
					+ "29915536978874943841090487446696173404868537329326375534972248"
					+ "23820055654064944764057795449937419951820969001399419298028679"
					+ "45713316629632399913980741939828586163164854177739330348873509"
					+ "90022988482031680713657046946373421828188934868681855445470776"
					+ "0567317932722051");
			PAy_re = new BigInteger("011672841329253061352459682073998696639888591494"
					+ "39356638583346846674795703805751062077755603033865459452877644"
					+ "92189396009326728050414260728579260271789717187576955967264122"
					+ "83914231698751169374428886782024280210603594698572285091301048"
					+ "36527584508166659164228296883643365075641055377691378623716496"
					+ "5186897520572892");
			PAy_im = new BigInteger("030202361639143237372993622144323331993366643914"
					+ "11996869396663509204983396137870107674630822294390592865472349"
					+ "00312942153042480944768548061383974591546806827126166371415846"
					+ "09908301620889382565849100998698618541374937691817764370363263"
					+ "17877168338053156455406716993148033881831963153478081806544448"
					+ "2917376125906043");

			// Alice's second basis point
			QAx_re = new BigInteger("140502306332291850005765744800797588553835421704"
					+ "46049643839273616935873607751911494909444226030682377726354179"
					+ "49430027644179318549326096806634126744091708496453215716129682"
					+ "10800586950879483952705639071317493747370326428143404266494948"
					+ "63834158604446646821952869357047814748928194312164523166501821"
					+ "2326422342802900");
			QAx_im = new BigInteger("210176260532322394698293174224844475921992299242"
					+ "23341497730293371933612817300526699252447260891293233109812015"
					+ "35572745658414595286655148675305326864717187602300304460658699"
					+ "73854112117393167393959214088355957741328913683881257256851991"
					+ "08553493050946900187179056219191136732686483137751063175258886"
					+ "7336771452543559");
			QAy_re = new BigInteger("023882702000648707127173203416099485183560722928"
					+ "91293274901643290014006776571520367082349184379108074846232858"
					+ "18197040149608581618471056515658790934205482186162675806084186"
					+ "37428866919293607592183267045624937018778281029855055214107413"
					+ "30327388180718434452363882052832344584569469879694451604286718"
					+ "0287590906232137");
			QAy_im = new BigInteger("072324584082448261894272120699258663545954242943"
					+ "65328334097230357831948430595372834775843638339491958179985760"
					+ "01564227242264741503266614970057789248141864536769379239919431"
					+ "89155425217444278412973978318050693319287058384111585368883594"
					+ "42043256886082354737082489513633103751812351643403345657720963"
					+ "2935046852664937");

			// Bob's first basis point
			PBx_re = new BigInteger("205850661121471302409728779454874396478895304150"
					+ "25483073420081846590405242308630749654559754356740565319287982"
					+ "04916382743060113442282130214868922347794609286547902912432881"
					+ "93309426463392585489043518781273631409171756157189262950564303"
					+ "53646327058279313418221604217069730893710026138853852327217688"
					+ "6301560967901462");
			PBx_im = new BigInteger("196842965285691355953488125514759797961362008081"
					+ "31261575724327603549051386749637348978803697676065786548191604"
					+ "41178668941832135229597621061898208640565828843004195175893045"
					+ "78542174571698352399469356747964118925525864950424752010854421"
					+ "87425588997614403921920243425981704921330013761738227107044383"
					+ "3243564390141968");
			PBy_re = new BigInteger("045531428053549708334100270138920906395419376366"
					+ "52505410088075261568455669476238891431945246783720325223265945"
					+ "14913800281130922674095180539985352170493698621315201447718673"
					+ "74099083472995500769626724616513278459933689987436017024530844"
					+ "37738394016266798776464975742361618922790109631879246838588455"
					+ "6431550816643686");
			PBy_im = new BigInteger("015912916798276976259537060516453224613845009325"
					+ "80093420140748089817758346908731827826062386634430018770341705"
					+ "23324793596083669736354648230735719379260150291712172535693417"
					+ "65707046449178012632390513266687409911270019612686646537263186"
					+ "87944281861405397439685421226430060576466860605129295154983523"
					+ "3234497604536197");

			// Bob's second basis point
			QBx_re = new BigInteger("083914357843664682809568997562926629168726733291"
					+ "68159090100215345589563565517824828653577194415594381456525880"
					+ "22999003779850058322692418964908392359691196722209916546255207"
					+ "25616059677786048310867298270901398114186801887514984581362897"
					+ "66042994547444191013647786341589067646721176840971360879399742"
					+ "0760871169299099");
			QBx_im = new BigInteger("018204660559824349285396767568894032098620613389"
					+ "81324457526681105861774931434982619326020718961122648752284724"
					+ "61582488227311292092697858809276370624333668648848529177096574"
					+ "54527702836675659429566685433424583402074882124829927739087004"
					+ "94995834039464930882168326522148725173098800446989177656471260"
					+ "1740753137056795");
			QBy_re = new BigInteger("184916057007068232934441314475432792212701813461"
					+ "77236325597544069411538375374064077896776170128801466174856468"
					+ "67327418371721908634006922373274101427070685970746608993229376"
					+ "31125586281492674159551226025243748470272725176501349273541169"
					+ "17778796021628983725491989101257658630718284312147238175272288"
					+ "1358724315491945");
			QBy_im = new BigInteger("141521134648496963286863946756952937138412879050"
					+ "69554230758416500349954400898243059057179433664359097788646201"
					+ "24415823172869549480890592247856161595793862112402424164379935"
					+ "59541228593262449488815453197033079641008184301999134160003350"
					+ "83177871908448203671949194044281065388980630303614381041906585"
					+ "4133337178435003");
			
		}

		else
			throw new RuntimeException("Strength "+strength+" not implemented");


		// Alice's basis for E0[2^eA]

		Fp2Point PA = new Fp2Point(E0,
				new Fp2Field(PAx_re,PAx_im),
				new Fp2Field(PAy_re,PAy_im),
				Fp2Field.ONE);

		Fp2Point QA = new Fp2Point(E0,
				new Fp2Field(QAx_re,QAx_im),
				new Fp2Field(QAy_re,QAy_im),
				Fp2Field.ONE);

		// Bob's basis for E0[3^eB]

		Fp2Point PB = new Fp2Point(E0,
				new Fp2Field(PBx_re,PBx_im),
				new Fp2Field(PBy_re,PBy_im),
				Fp2Field.ONE);

		Fp2Point QB = new Fp2Point(E0,
				new Fp2Field(QBx_re,QBx_im),
				new Fp2Field(QBy_re,QBy_im),
				Fp2Field.ONE);	


		return new IsogenyDomainParameters(E0,
				eA,PA,QA,StrategyA,
				eB,PB,QB,StrategyB);

	}
}
